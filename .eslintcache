[{"C:\\Users\\rayrc\\spsim\\src\\index.js":"1","C:\\Users\\rayrc\\spsim\\src\\App.js":"2","C:\\Users\\rayrc\\spsim\\src\\components\\Grid.js":"3","C:\\Users\\rayrc\\spsim\\src\\AStar.js":"4"},{"size":240,"mtime":1613706296229,"results":"5","hashOfConfig":"6"},{"size":334,"mtime":1613706296227,"results":"7","hashOfConfig":"6"},{"size":6506,"mtime":1613706296228,"results":"8","hashOfConfig":"6"},{"size":3210,"mtime":1613706296227,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gh8rx0",{"filePath":"12","messages":"13","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\rayrc\\spsim\\src\\index.js",[],"C:\\Users\\rayrc\\spsim\\src\\App.js",["21","22","23","24"],"import {Container, Navbar, Jumbotron, Form } from 'react-bootstrap'\nimport Grid from './components/Grid'\nimport './style/App.scss'\n//import 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\n\nfunction App() {\n  return (\n        <div className = \"App\">\n              <Grid></Grid>\n        </div>\n\n  );\n}\n\nexport default App;\n",["25","26"],"C:\\Users\\rayrc\\spsim\\src\\components\\Grid.js",["27","28","29","30"],"// For the Grid Component Size N x N\r\n\r\nimport React from \"react\"\r\nimport {useEffect, useRef, useState } from \"react\"\r\nimport \"../style/grid.css\"    \r\nlet arr;\r\nlet ctx, w,h,scalingX,scalingY,currentColor\r\nlet startMade = false;\r\nlet endMade = false;\r\n\r\nconst Grid = () => {\r\n    \r\n    const updateArr = (x,y) =>{\r\n        switch(arr[x][y]){\r\n            case 'b':\r\n                ctx.fillStyle = \"#1B2631\"\r\n                break;\r\n            case 's':\r\n                ctx.fillStyle = '#217BAF'\r\n                break;\r\n            case 'e':\r\n                ctx.fillStyle = '#C12051'\r\n                break;\r\n            default:\r\n                ctx.fillStyle = \"#F3F3F3\" \r\n        }\r\n        ctx.fillRect(x*(Math.floor((window.innerWidth*2)/w))+3,\r\n        y*(Math.floor((window.innerHeight*2)/h))+3,\r\n        Math.floor((window.innerWidth*2)/w)-6,\r\n        Math.floor((window.innerHeight*2)/h)-6)\r\n    }\r\n    \r\n    //Set Canvas Dimensions and rebuild grid  \r\n    const generateCTX = () =>{\r\n        console.log(\"In CTX\")\r\n        scalingX = Math.floor((window.innerWidth*2)/w)-1.5\r\n        scalingY = Math.floor((window.innerHeight*2)/h)-1\r\n        console.log(arr)\r\n        const canvas = canvasRef.current\r\n        canvas.width = window.innerWidth*2\r\n        canvas.height = window.innerHeight*2\r\n        ctx = canvas.getContext(\"2d\")\r\n        ctx.scale(2,2)\r\n        contextRef.current = ctx\r\n        ctx.lineWidth = 2;\r\n        ctx.fillStyle = \"grey\";\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        \r\n        //Generate Grid \r\n        for(let i = 0; i < arr.length; i++){\r\n            for(let j = 0; j < arr[0].length; j++){\r\n\r\n                switch(arr[i][j]){\r\n                    case 'b':\r\n                        ctx.fillStyle = \"#1B2631\"\r\n                        break;\r\n                    case 's':\r\n                        ctx.fillStyle = '#217BAF'\r\n                        break;\r\n                    case 'e':\r\n                        ctx.fillStyle = '#C12051'\r\n                        break;\r\n                    default:\r\n                        ctx.fillStyle = \"#F3F3F3\" \r\n                }\r\n                ctx.fillRect(\r\n                    i*(Math.floor(canvas.width/w))+3,\r\n                    j*(Math.floor(canvas.height/h))+3\r\n                    ,Math.floor(canvas.width/w)-6,\r\n                    Math.floor(canvas.height/h)-6\r\n                    )\r\n                }\r\n            }\r\n            ctx.fillStyle = \"#1B2631\"\r\n            console.log(\"Create Rect\")\r\n        }\r\n        \r\n        const canvasRef = useRef(null)\r\n        const contextRef = useRef(null)\r\n        const [isDrawing, setIsDrawing] = useState(false)\r\n        \r\n        //Fixed Size for Now, Optionally Change it for later \r\n        const size = 25\r\n\r\n        //Run only once \r\n        useEffect(() => {\r\n            console.log(\"Before fill\")\r\n            w = Math.floor((window.innerWidth - 6 * size)/size);\r\n            h = Math.floor((window.innerHeight -6 * size)/size);\r\n            arr = Array(w).fill().map(() => Array(h).fill('a'));      \r\n            generateCTX()\r\n            window.addEventListener(\"resize\", generateCTX);\r\n            return () => window.removeEventListener(\"resize\", generateCTX) \r\n        }, [w,h])\r\n        \r\n\r\n        //When Mouse is clicked take the current positions to calculate which part of the Grid to convert to an obstacle\r\n        const startDraw = ({nativeEvent}) =>{\r\n            const {offsetX, offsetY} = nativeEvent\r\n            const x = Math.floor(offsetX/scalingX)\r\n            const y = Math.floor(offsetY/scalingY)\r\n            console.log(offsetX + \" , \" + offsetY )\r\n            //Left Click Only \r\n            if(nativeEvent.which === 1 && arr[x][y] != 's' && arr[x][y] != 'e' ){\r\n                //Erase Node\r\n                if(arr[x][y] != 'a'){\r\n                    arr[x][y] = 'a'\r\n                    currentColor = 'a'\r\n                }\r\n                \r\n                //Create Node\r\n                else{\r\n                    arr[x][y] = 'b';\r\n                    currentColor = 'b'\r\n                }\r\n                setIsDrawing(true)\r\n            }else{\r\n                console.log(startMade)\r\n                console.log(endMade)\r\n\r\n                if(arr[x][y] == 's'){\r\n                    startMade = false;\r\n                    arr[x][y] = 'a'\r\n                }else if(arr[x][y] == 'e'){\r\n                    endMade = false;\r\n                    arr[x][y] = 'a'\r\n                }else if(!startMade){\r\n                    arr[x][y] = 's';\r\n                    startMade = true;\r\n                }else if(!endMade){\r\n                    arr[x][y] = 'e';\r\n                    endMade = true;\r\n                }\r\n            }\r\n            updateArr(x,y)\r\n        }\r\n        \r\n        //Stop drawing and reset the useState   \r\n        const endDraw = () =>{\r\n            ctx.fillStyle = \"#1B2631\"\r\n            setIsDrawing(false)\r\n        }\r\n        \r\n        //Generate the obstacles \r\n        const draw = ({nativeEvent}) =>{\r\n            if(isDrawing){\r\n                const {offsetX, offsetY} = nativeEvent\r\n                const x = Math.floor(offsetX/scalingX)\r\n                const y = Math.floor(offsetY/scalingY)\r\n                if(arr[x][y] != 's' && arr[x][y] != 'e' ){\r\n                    arr[x][y] = currentColor;\r\n                    updateArr(x,y)\r\n                }\r\n            }\r\n        }\r\n        \r\n        return (\r\n            <canvas id = \".node\"\r\n            onMouseDown = {startDraw}\r\n            onContextMenu = {(e)=>{e.preventDefault()}}\r\n            onMouseUp = {endDraw}\r\n            onMouseMove = {draw}\r\n            ref={canvasRef}\r\n            />\r\n            \r\n            )\r\n        }\r\n        \r\n        export default Grid","C:\\Users\\rayrc\\spsim\\src\\AStar.js",[],{"ruleId":"31","severity":1,"message":"32","line":1,"column":9,"nodeType":"33","messageId":"34","endLine":1,"endColumn":18},{"ruleId":"31","severity":1,"message":"35","line":1,"column":20,"nodeType":"33","messageId":"34","endLine":1,"endColumn":26},{"ruleId":"31","severity":1,"message":"36","line":1,"column":28,"nodeType":"33","messageId":"34","endLine":1,"endColumn":37},{"ruleId":"31","severity":1,"message":"37","line":1,"column":39,"nodeType":"33","messageId":"34","endLine":1,"endColumn":43},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"31","severity":1,"message":"42","line":3,"column":38,"nodeType":"33","messageId":"34","endLine":3,"endColumn":48},{"ruleId":"31","severity":1,"message":"37","line":5,"column":39,"nodeType":"33","messageId":"34","endLine":5,"endColumn":43},{"ruleId":"43","severity":1,"message":"44","line":44,"column":52,"nodeType":"45","messageId":"46","endLine":44,"endColumn":54},{"ruleId":"43","severity":1,"message":"44","line":128,"column":50,"nodeType":"45","messageId":"46","endLine":128,"endColumn":52},"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'Jumbotron' is defined but never used.","'Form' is defined but never used.","no-native-reassign",["47"],"no-negated-in-lhs",["48"],"'useContext' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]