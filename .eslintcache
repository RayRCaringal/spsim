[{"C:\\Users\\rayrc\\spsim\\src\\index.js":"1","C:\\Users\\rayrc\\spsim\\src\\App.js":"2","C:\\Users\\rayrc\\spsim\\src\\components\\Grid.js":"3","C:\\Users\\rayrc\\spsim\\src\\AStar.js":"4","C:\\Users\\rayrc\\spsim\\src\\components\\Trail.js":"5"},{"size":240,"mtime":1613706296229,"results":"6","hashOfConfig":"7"},{"size":334,"mtime":1613706296227,"results":"8","hashOfConfig":"7"},{"size":6965,"mtime":1614410334133,"results":"9","hashOfConfig":"7"},{"size":3210,"mtime":1613706296227,"results":"10","hashOfConfig":"7"},{"size":653,"mtime":1614410536622,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1gh8rx0",{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"14"},"C:\\Users\\rayrc\\spsim\\src\\index.js",[],["27","28"],"C:\\Users\\rayrc\\spsim\\src\\App.js",["29","30","31","32"],"import {Container, Navbar, Jumbotron, Form } from 'react-bootstrap'\nimport Grid from './components/Grid'\nimport './style/App.scss'\n//import 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\n\nfunction App() {\n  return (\n        <div className = \"App\">\n              <Grid></Grid>\n        </div>\n\n  );\n}\n\nexport default App;\n","C:\\Users\\rayrc\\spsim\\src\\components\\Grid.js",["33","34","35","36","37","38","39","40","41","42","43"],"// For the Grid Component Size N x N\r\nimport {useEffect, useRef, useState, createRef, createElement} from \"react\"\r\nimport {AStar} from \"../AStar\";\r\nimport {Container, Navbar, Jumbotron, Form, Button} from 'react-bootstrap'\r\nimport \"../style/grid.css\"    \r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Trail from \"./Trail\";\r\n\r\nlet currentColor, arr, start, goal, scaling\r\n\r\n\r\n\r\nconst Grid = () => {\r\n\r\n    //Manage Click and Draw \r\n    const [isDrawing, setIsDrawing] = useState(false)\r\n    const [startMade, setStartMade] = useState(false)\r\n    const [goalMade, setGoalMade] = useState(false)\r\n\r\n    //Manage Grid \r\n    const [nodeSize, setNodeSize] = useState(25)\r\n\r\n    //SVG array for dynamic created SVGs \r\n    const svgRef = useRef([])\r\n\r\n    //Reference for SVG, TO BE DEPRECIATED \r\n    const gridSVG = useRef(null)\r\n    const trailRef = useRef(null)\r\n\r\n    const [open, toggle] = useState(false)\r\n\r\n   // const props = useSpring({from:{transform: 'scale(0)'}, to: { transform: 'scale(1)'},config: {duration: 250}})     \r\n\r\n    //Run only once \r\n    useEffect(()=>{\r\n        refresh()\r\n        scaling = (1000/nodeSize)*2.535\r\n    },[nodeSize])\r\n\r\n    \r\n    const updateColor = (x,y) =>{\r\n        switch(arr[x][y]){\r\n            case 'b':\r\n                return \"#111519\"\r\n            case 's':\r\n                return '#217BAF'\r\n            case 'e':\r\n                return '#C12051'\r\n            case 'p':\r\n                return '#14F7AF'\r\n            default:\r\n                return \"#F3F3F3\" \r\n        }\r\n    }\r\n    \r\n    \r\n    const visualize = ()=>{\r\n        //Path is the Final Node, should either be the goal or the node before the goal. \r\n        let path = AStar(start, goal, 1, arr)\r\n        let pathSVG = []\r\n\r\n        //Trace the shortest path via the parentNode. Update grid with g \r\n        while(JSON.stringify(path.parentNode.position) != JSON.stringify(path.parentNode.parentNode)){\r\n            path = path.parentNode\r\n            let [x,y] = path.position\r\n            arr[x][y] = 'p'\r\n            draw(x,y,trailRef)\r\n        }\r\n        toggle(!open)\r\n       \r\n    }\r\n\r\n    //Draws/Deletes Obstalces on Left Click, or End/Goal on Right Click\r\n    const startDraw = ({nativeEvent}) =>{\r\n        const {offsetX, offsetY} = nativeEvent\r\n        const x = Math.floor(offsetX/scaling)\r\n        const y = Math.floor(offsetY/scaling)\r\n\r\n        //Left Click Only \r\n      \r\n        if(nativeEvent.which === 1 && arr[x][y] !== 's' && arr[x][y] !== 'e' ){\r\n           currentColor = arr[x][y] = (arr[x][y] != 'a')? 'a' : 'b'\r\n           draw(x,y, gridSVG)\r\n           setIsDrawing(true)\r\n        }\r\n        //Right Click\r\n        else{\r\n            if(arr[x][y] === 's'){ //Delete Start \r\n                setStartMade(false)\r\n                arr[x][y] = 'a'\r\n            }else if(arr[x][y] === 'e'){//Delete Goal\r\n                setGoalMade(false)\r\n                arr[x][y] = 'a'\r\n            }else if(!startMade){//Create Start\r\n                arr[x][y] = 's';\r\n                start = [x,y]\r\n                setStartMade(true)\r\n            }else if(!goalMade){//Create Goal\r\n                arr[x][y] = 'e';       \r\n                goal = [x,y]\r\n                setGoalMade(true)  \r\n                }\r\n            }\r\n            draw(x,y, gridSVG)\r\n        }\r\n        \r\n    //Stop drawing and reset the useState   \r\n    const endDraw = () =>{setIsDrawing(false)}\r\n        \r\n    //Create SVG elements \r\n    const draw = (x,y, ref)=>{\r\n        const newElement = document.createElementNS(\"http://www.w3.org/2000/svg\", 'rect');\r\n        const attrs = {\"width\": (1000/nodeSize)-2,\r\n                        \"height\": (1000/nodeSize)-2,\r\n                        \"x\":x*(1000/nodeSize)+1,\r\n                        \"y\": y*(1000/nodeSize)+1,\r\n                        \"fill\": updateColor(x,y),\r\n                    }\r\n\r\n        for(const key in attrs){\r\n            newElement.setAttribute(key, attrs[key])\r\n        }\r\n\r\n        ref.current.appendChild(newElement)\r\n   }\r\n\r\n    const drawing = ({nativeEvent}) =>{\r\n        if(isDrawing){\r\n            const {offsetX, offsetY} = nativeEvent\r\n            const x = Math.floor(offsetX/scaling)\r\n            const y = Math.floor(offsetY/scaling)\r\n            \r\n            if(arr[x][y] !== 's' && arr[x][y] !== 'e' && arr[x][y] != currentColor){\r\n                arr[x][y] = currentColor\r\n                draw(x,y, gridSVG)\r\n            }\r\n        }\r\n    }   \r\n    \r\n    const refresh = ()=>{\r\n        arr = Array(parseInt(nodeSize)).fill().map(() => Array(parseInt(nodeSize)).fill('a'));  \r\n        const [zero, one, ...rest ] = gridSVG.current.childNodes\r\n        if(rest) rest.forEach(node => {node.remove()})\r\n        setStartMade(false)\r\n        setGoalMade(false)\r\n    }\r\n        \r\n        return (\r\n            <>\r\n                <Navbar bg = \"dark\" variant = \"dark\">\r\n                    <Container>\r\n                        <Navbar.Brand> Shortest Path Simulator</Navbar.Brand>\r\n                    </Container>\r\n                    <Form >\r\n                        <Form.Control \r\n                        value = {nodeSize} \r\n                        type = \"range\" \r\n                        min = {4}\r\n                        max = {100}\r\n                        onChange = {v => setNodeSize(v.target.value)}/>\r\n                    </Form>\r\n                    <Button className = \"mx-auto\" onClick = {refresh}>Refresh</Button> \r\n                    <Button className = \"mx-auto\" \r\n                        disabled = {!(startMade  && goalMade)}\r\n                        onClick = {visualize}>\r\n                            Start\r\n                    </Button> \r\n                </Navbar>\r\n                <Jumbotron className = \"p-1\">\r\n                        <animated.svg class = \"test\" ref = {gridSVG} viewBox = \"0 0 1000 1000\" \r\n                        width=\"100%\" height=\"auto\" xmlns=\"http://www.w3.org/2000/svg\"\r\n                        onMouseDown = {startDraw}\r\n                        onMouseMove = {drawing}\r\n                        onMouseUp = {endDraw}\r\n                        onContextMenu = {(e)=>{e.preventDefault()}}>   \r\n                            <g>\r\n                                <defs>\r\n                                <pattern id=\"Pattern\" x=\"1\" y=\"1\" width={1000/nodeSize} height={1000/nodeSize} patternUnits=\"userSpaceOnUse\">\r\n                                    <rect width = {1000/nodeSize-2} height = {1000/nodeSize-2} fill = \"#F3F3F3\"/>\r\n                                </pattern>\r\n                                </defs>     \r\n                                <rect fill=\"url(#Pattern)\" width=\"100%\" height=\"100%\"/>\r\n                            </g>\r\n                            <Trail open = {open} ref = {trailRef}>\r\n                                <></>\r\n                            </Trail>\r\n                        </animated.svg>\r\n                </Jumbotron>\r\n            </>\r\n            )\r\n        }\r\n        \r\n        export default Grid","C:\\Users\\rayrc\\spsim\\src\\AStar.js",[],["44","45"],"C:\\Users\\rayrc\\spsim\\src\\components\\Trail.js",["46","47"],"import {forwardRef} from 'react'\r\nimport { useTrail, a } from 'react-spring'\r\n\r\nconst Trail =({open, children}, ref) => {\r\n    const trail = useTrail(children.length, {\r\n      config: { mass: 5, tension: 2000, friction: 200 },\r\n      opacity: open ? 0 : 1,\r\n      width: open ? 0 : 1000,\r\n    })\r\n    return (\r\n        <>\r\n          {trail.map(({width:w, ...rest}, index) => (\r\n                <g ref = {ref}  \r\n                height=\"auto\" ref = {ref} style = {{ ...rest, width: w.interpolate((w) =>`${w}px`)}}>\r\n                    {children[index]}\r\n                </g>\r\n          ))}\r\n        </>\r\n    )\r\n  }\r\n\r\n  export default forwardRef(Trail) ",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":1,"column":9,"nodeType":"54","messageId":"55","endLine":1,"endColumn":18},{"ruleId":"52","severity":1,"message":"56","line":1,"column":20,"nodeType":"54","messageId":"55","endLine":1,"endColumn":26},{"ruleId":"52","severity":1,"message":"57","line":1,"column":28,"nodeType":"54","messageId":"55","endLine":1,"endColumn":37},{"ruleId":"52","severity":1,"message":"58","line":1,"column":39,"nodeType":"54","messageId":"55","endLine":1,"endColumn":43},{"ruleId":"52","severity":1,"message":"59","line":2,"column":38,"nodeType":"54","messageId":"55","endLine":2,"endColumn":47},{"ruleId":"52","severity":1,"message":"60","line":2,"column":49,"nodeType":"54","messageId":"55","endLine":2,"endColumn":62},{"ruleId":"52","severity":1,"message":"61","line":6,"column":10,"nodeType":"54","messageId":"55","endLine":6,"endColumn":19},{"ruleId":"52","severity":1,"message":"62","line":24,"column":11,"nodeType":"54","messageId":"55","endLine":24,"endColumn":17},{"ruleId":"63","severity":1,"message":"64","line":38,"column":7,"nodeType":"65","endLine":38,"endColumn":17,"suggestions":"66"},{"ruleId":"52","severity":1,"message":"67","line":60,"column":13,"nodeType":"54","messageId":"55","endLine":60,"endColumn":20},{"ruleId":"68","severity":1,"message":"69","line":63,"column":56,"nodeType":"70","messageId":"71","endLine":63,"endColumn":58},{"ruleId":"68","severity":1,"message":"69","line":82,"column":50,"nodeType":"70","messageId":"71","endLine":82,"endColumn":52},{"ruleId":"68","severity":1,"message":"69","line":133,"column":68,"nodeType":"70","messageId":"71","endLine":133,"endColumn":70},{"ruleId":"52","severity":1,"message":"72","line":142,"column":16,"nodeType":"54","messageId":"55","endLine":142,"endColumn":20},{"ruleId":"52","severity":1,"message":"73","line":142,"column":22,"nodeType":"54","messageId":"55","endLine":142,"endColumn":25},{"ruleId":"48","replacedBy":"74"},{"ruleId":"50","replacedBy":"75"},{"ruleId":"52","severity":1,"message":"76","line":2,"column":20,"nodeType":"54","messageId":"55","endLine":2,"endColumn":21},{"ruleId":"77","severity":1,"message":"78","line":14,"column":31,"nodeType":"79","endLine":14,"endColumn":42},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'Jumbotron' is defined but never used.","'Form' is defined but never used.","'createRef' is defined but never used.","'createElement' is defined but never used.","'useSpring' is defined but never used.","'svgRef' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refresh'. Either include it or remove the dependency array.","ArrayExpression",["82"],"'pathSVG' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'zero' is assigned a value but never used.","'one' is assigned a value but never used.",["80"],["81"],"'a' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},"Update the dependencies array to be: [nodeSize, refresh]",{"range":"85","text":"86"},[1154,1164],"[nodeSize, refresh]"]